/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Client
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-30T01:10:19.762+03:00[Europe/Moscow]")
public class Client {
    public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
    @SerializedName(SERIALIZED_NAME_CLIENT_ID)
    private Integer clientId;

    public static final String SERIALIZED_NAME_DOCUMENT = "document";
    @SerializedName(SERIALIZED_NAME_DOCUMENT)
    private String document;

    public static final String SERIALIZED_NAME_SURNAME = "surname";
    @SerializedName(SERIALIZED_NAME_SURNAME)
    private String surname;

    public static final String SERIALIZED_NAME_FIRSTNAME = "firstname";
    @SerializedName(SERIALIZED_NAME_FIRSTNAME)
    private String firstname;

    public static final String SERIALIZED_NAME_PATRONYMIC = "patronymic";
    @SerializedName(SERIALIZED_NAME_PATRONYMIC)
    private String patronymic;

    public static final String SERIALIZED_NAME_BIRTHDAY = "birthday";
    @SerializedName(SERIALIZED_NAME_BIRTHDAY)
    private LocalDate birthday;

    public Client() {
    }

    public Client clientId(Integer clientId) {

        this.clientId = clientId;
        return this;
    }

    /**
     * Get clientId
     *
     * @return clientId
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Integer getClientId() {
        return clientId;
    }


    public void setClientId(Integer clientId) {
        this.clientId = clientId;
    }


    public Client document(String document) {

        this.document = document;
        return this;
    }

    /**
     * Get document
     *
     * @return document
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public String getDocument() {
        return document;
    }


    public void setDocument(String document) {
        this.document = document;
    }


    public Client surname(String surname) {

        this.surname = surname;
        return this;
    }

    /**
     * Get surname
     *
     * @return surname
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public String getSurname() {
        return surname;
    }


    public void setSurname(String surname) {
        this.surname = surname;
    }


    public Client firstname(String firstname) {

        this.firstname = firstname;
        return this;
    }

    /**
     * Get firstname
     *
     * @return firstname
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public String getFirstname() {
        return firstname;
    }


    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }


    public Client patronymic(String patronymic) {

        this.patronymic = patronymic;
        return this;
    }

    /**
     * Get patronymic
     *
     * @return patronymic
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public String getPatronymic() {
        return patronymic;
    }


    public void setPatronymic(String patronymic) {
        this.patronymic = patronymic;
    }


    public Client birthday(LocalDate birthday) {

        this.birthday = birthday;
        return this;
    }

    /**
     * Get birthday
     *
     * @return birthday
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public LocalDate getBirthday() {
        return birthday;
    }


    public void setBirthday(LocalDate birthday) {
        this.birthday = birthday;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Client client = (Client) o;
        return Objects.equals(this.clientId, client.clientId) &&
                Objects.equals(this.document, client.document) &&
                Objects.equals(this.surname, client.surname) &&
                Objects.equals(this.firstname, client.firstname) &&
                Objects.equals(this.patronymic, client.patronymic) &&
                Objects.equals(this.birthday, client.birthday);
    }

    @Override
    public int hashCode() {
        return Objects.hash(clientId, document, surname, firstname, patronymic, birthday);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Client {\n");
        sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
        sb.append("    surname: ").append(toIndentedString(surname)).append("\n");
        sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
        sb.append("    patronymic: ").append(toIndentedString(patronymic)).append("\n");
        sb.append("    document: ").append(toIndentedString(document)).append("\n");
        sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("clientId");
        openapiFields.add("surname");
        openapiFields.add("firstname");
        openapiFields.add("patronymic");
        openapiFields.add("document");
        openapiFields.add("birthday");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to Client
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (Client.openapiRequiredFields.isEmpty()) {
                return;
            } else { // has required fields
                throw new IllegalArgumentException(String.format("The required field(s) %s in Client is not found in the empty JSON string", Client.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!Client.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Client` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
            }
        }
        if ((jsonObj.get("document") != null && !jsonObj.get("document").isJsonNull()) && !jsonObj.get("document").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `document` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document").toString()));
        }
        if ((jsonObj.get("surname") != null && !jsonObj.get("surname").isJsonNull()) && !jsonObj.get("surname").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `surname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surname").toString()));
        }
        if ((jsonObj.get("firstname") != null && !jsonObj.get("firstname").isJsonNull()) && !jsonObj.get("firstname").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `firstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstname").toString()));
        }
        if ((jsonObj.get("patronymic") != null && !jsonObj.get("patronymic").isJsonNull()) && !jsonObj.get("patronymic").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `patronymic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("patronymic").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Client.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Client' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Client> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(Client.class));

            return (TypeAdapter<T>) new TypeAdapter<Client>() {
                @Override
                public void write(JsonWriter out, Client value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public Client read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of Client given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Client
     * @throws IOException if the JSON string is invalid with respect to Client
     */
    public static Client fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Client.class);
    }

    /**
     * Convert an instance of Client to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

